---
import Layout from '../layouts/Layout.astro';
import Nav from '../components/Nav.astro';
import ImageViewer from '../components/ImageViewer.astro';
import { Image, Picture } from '@astrojs/image/components';
import sharp from 'sharp';
import { getPicture } from '@astrojs/image';
import { encode } from "blurhash";
import * as fs from 'node:fs/promises'

let imgs = await Astro.glob("../img/photography/*");
let files = await fs.readdir("./src/img/photography/");
let blurhashes: string[] = [];

for (let i = 0; i < imgs.length; i++) {
  await getPicture({
    src: imgs[i].default,
    alt: "photo",
    widths: [ 370, 100 ],
    formats: ["webp", "avif"],
  });

  if (imgs[i].default.src.split("/").pop() !== files[i]) {
    throw new Error("mismatch between Astro.glob and fs.readdir outputs when reading src/img/photography");
  }

  let { data: bufferData, info: { width, height } } =
    await sharp("./src/img/photography/" + files[i])
    .resize(100) // TODO:prod 100
    .raw()
    .ensureAlpha()
    .toBuffer({ resolveWithObject: true });
  // let ar = width / height;
  // let w = Math.floor(Math.min(9 ,Math.max(3, 3 * ar)));
  // let h = Math.floor(Math.min(9 ,Math.max(3, 3 / ar)));
  blurhashes[i] = encode(new Uint8ClampedArray(bufferData), width, height, 5, 5); // TODO:prod 4,4 or more
}
---

<Layout title="">
  <Nav />
  <main class="mt-4">
    <h1 class="text-center mb-8">Photography</h1>
    <div id="masonry-container" class="w-[100ch]">
      {imgs.map((img, i) => (
        <div class="img-container relative overflow-clip w-[340px] group inline-block translate-y-[99999px]" style={`height: ${340 / img.default.width * img.default.height}px`}>
          <span class="absolute top-1/2 left-1/2 text-4xl -translate-x-1/2 -translate-y-1/2 z-10 text-white font-bold text-shadow">{i}</span>

          <Picture
            aria-role="button"
            tabindex={img.i}
            data-index={img.i}
            data-full-size-src={img.default.src}
            data-blurhash={blurhashes[i]}
            loading="lazy"
            class="img transition-transform cursor-pointer group-hover:scale-110 duration-300 hidden"
            src={img.default}
            alt="photo"
            widths={[370, 100]}
            sizes="(min-width: 1000px) 370px"
            width={340}
            height={Math.floor(340 / img.default.width * img.default.height)}
          />

          <canvas class="blur-canvas absolute inset-0 -z-10 w-full h-full"
            width={24}
            height={24}
          />
        </div>
      ))}
    </div>
  </main>
  <ImageViewer />
</Layout>


<script>
import MagicGrid from "magic-grid"
import { decodeBlurHash } from 'fast-blurhash';

let magicGrid = new MagicGrid({
  container: "#masonry-container",
  static: true,
  animate: true,
  gutter: 8,
});
magicGrid.listen();

let imageViewer = document.getElementById("image-viewer");
let imgs = document.querySelectorAll("img.img") as NodeListOf<HTMLImageElement>;
let imgContainers = document.getElementsByClassName("img-container");
let prev = document.getElementById("image-prev");
let next = document.getElementById("image-next");

function fillCanvas(i: number, canvas: HTMLCanvasElement) {
  const pixels = decodeBlurHash(imgs[i].dataset.blurhash!, canvas.width, canvas.height);
  const ctx = canvas.getContext('2d')!;
  const imageData = ctx.createImageData(canvas.width, canvas.height);
  imageData.data.set(pixels);
  ctx.putImageData(imageData, 0, 0);
}

function setupImgViewer(i: number) {
  if (!imgs[i].dataset.fullSizeSrc) {
    throw new Error("Expected full-size-src to be non empty");
  }
  imageViewer!.getElementsByTagName("img")[0].src = "";
  imageViewer!.getElementsByTagName("img")[0].src = imgs[i].dataset.fullSizeSrc!;
  fillCanvas(i, imageViewer!.getElementsByTagName("canvas")[0]);
  if (i !== 0) {
    prev!.dataset.imageIndex = `${i - 1}`;
    prev!.style.display = "block";
  }
  else {
    prev!.style.display = "none";
  }
  if (i !== imgs.length - 1) {
    next!.dataset.imageIndex = `${i + 1}`;
    next!.style.display = "block";
  }
  else {
    next!.style.display = "none";
  }
}

// Lazy loading. Done non-trivially because Astro's Picture, js masonry using translates, and lazy loading all have to work with each other.
let observer = new IntersectionObserver((entries, observer) => {
  for (let entry of entries) {
    if (entry.isIntersecting) {
      let img = entry.target.getElementsByTagName("img")[0];
      // if (img.dataset.src == null) {
      //   throw new Error("Expected data-src to be set");
      // }
      // img.src = img.dataset.src!;
      img.classList.remove("hidden");
      observer.unobserve(img);
      continue;
    }
  }
});
for (let imgContainer of imgContainers) {
  observer.observe(imgContainer);
}

for (let i = 0; i < imgs.length; i++) {
  fillCanvas(i, imgContainers[i].getElementsByTagName("canvas")[0]);

  imgs[i].addEventListener("click", e => {
    if (imageViewer) {
      imageViewer.style.display = "grid";
      setupImgViewer(i);
    }
  });
};

document.getElementById("image-viewer-close")?.addEventListener("click", e => {
  if (imageViewer) {
    imageViewer.style.display = "none";
  }
})

function handleSwitch(this: HTMLElement) {
  setupImgViewer(parseInt(this.dataset.imageIndex ?? "0"));
};
if (prev) prev.addEventListener("click", handleSwitch);
if (next) next.addEventListener("click", handleSwitch);

</script>

<style>
.text-shadow {
  text-shadow: 0 0 4px black;
};
</style>
