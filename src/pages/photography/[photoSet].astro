---
import { getImage } from "@astrojs/image";
import path from "node:path";
import sharp from "sharp";
import Layout from "@layouts/Layout.astro";
import Nav from "@components/Nav.astro";
import ImageViewer from "@components/ImageViewer.astro";
import Main from "@layouts/Main.astro";
import { rgbaToThumbHash } from "thumbhash";
import { getAsset, toUrl } from "@lib/util";
import Link from "@components/Link.astro";

interface Photo {
  src: string;
  alt?: string;
}
interface PhotoSet {
  index: number;
  thumb: string;
  name: string;
  photos: Photo[];
}
interface Props {
  photoSet: PhotoSet;
  allSets: PhotoSet[];
}
interface MyImage {
  width: number;
  height: number;
  hash: string;
  src: string;
  fullSrc: string;
  alt?: string;
}

export async function getStaticPaths() {
  let photoSets = await Astro.glob("../../data/photography/*.json");
  return photoSets.map((photoSet) => ({
    params: {
      photoSet: toUrl(photoSet.name),
    },
    props: { photoSet, allSets: photoSets },
  }));
}

const { photoSet, allSets } = Astro.props;

let imgs: MyImage[] = [];

// Calculate blurhashes and transform images to smaller size
for (let { src, alt } of photoSet.photos) {
  const img = await getAsset(src);

  const { src: smallSrc } = await getImage({
    src: img.default.src,
    alt: "photo",
    width: 340 * 1.1,
    aspectRatio: img.default.width / img.default.height,
    format: "webp",
    quality: 90,
  });
  const { src: fullSrc } = await getImage({
    src: img.default.src,
    alt: "photo",
    width: img.default.width,
    height: img.default.height,
  });
  if (smallSrc == null || fullSrc == null) {
    throw new Error("Astro's getImage failed. src is not present.");
  }

  const {
    data: bufferData,
    info: { width: hashW, height: hashH },
  } = await sharp(path.join(".", src))
    .resize(20) // TODO:prod increase
    .raw()
    .ensureAlpha()
    .toBuffer({ resolveWithObject: true });

  const hash = Buffer.from(rgbaToThumbHash(hashW, hashH, bufferData)).toString("base64");
  imgs.push({ width: img.default.width, height: img.default.height, hash, src: smallSrc, fullSrc, alt });
}
---

<Layout title={`Karolina Nocoń - ${photoSet.name}`}>
  <Main class="sm:!w-auto xl:w-wide overflow-hidden">
    <Nav />
    <nav class="mt-8 mb-16">
      <ul class="flex flex-wrap justify-center">
        {
          allSets
            .sort((a, b) => a.index - b.index)
            .map((set, i) => (
              <li class="inline-block">
                <Link
                  href={"/photography/" + toUrl(set.name)}
                  class="px-2 group"
                  activeClass="!tracking-[0.5em] !font-bold px-6"
                  nohover
                >
                  <span
                    data-before={set.name}
                    class="block relative before:content-[attr(data-before)] before:absolute before:top-full transition-transform transition-1 group-hover:-translate-y-full before:text-black"
                  >
                    {set.name}
                  </span>
                </Link>
              </li>
            ))
        }
      </ul>
    </nav>
    <div id="masonry-container" class="mx-auto w-full">
      {
        imgs.map((img, i) => (
          <button
            class="img-container relative overflow-clip w-[340px] group inline-block translate-x-[100vw]"
            style={{
              height: `${(340 / img.width) * img.height}px;`,
            }}
          >
            {/* data-hash MUST be set */}
            <img
              data-index={i}
              data-full-size-src={img.fullSrc}
              data-hash={img.hash}
              data-width={img.width}
              data-height={img.height}
              loading="lazy"
              class="img transition-transform cursor-pointer group-hover:scale-110 duration-300 hidden"
              src={img.src}
              alt={img.alt ?? "Photo by Karolina Nocoń"}
              width={340}
              height={Math.floor((340 / img.width) * img.height)}
            />

            <canvas
              class="blur-canvas absolute inset-0 -z-10 h-full w-full"
              width={24}
              height={24}
            />
          </button>
        ))
      }
    </div>
  </Main>
  <ImageViewer />
</Layout>

<script>
  import MagicGrid from "magic-grid";
  import { thumbHashToRGBA } from "thumbhash";
  import {
    BLUR_TRANSITION,
    hideImageViewer,
    IMAGE_VIEWER_TRANSITION,
    hidingImageViewer,
    IMAGE_TRANSITION,
  } from "@lib/util";

  let imageViewer = document.getElementById("image-viewer") as HTMLElement;
  let imgs = document.querySelectorAll("img.img") as NodeListOf<HTMLImageElement>;
  let imgContainers = document.getElementsByClassName("img-container");
  let prev = document.getElementById("image-prev") as HTMLElement;
  let next = document.getElementById("image-next") as HTMLElement;
  let fetchingImgs = 0;
  let currentIndex = 0;

  if (!imageViewer) throw new Error("Expected element with id 'image-viewer' to exist");
  // if (imgs.length !== imgContainers.length) throw new Error("Expected every .img to be wrapped in .img-container");

  // Setup masonry grid
  let magicGrid = new MagicGrid({
    container: "#masonry-container",
    static: true,
    animate: false,
    gutter: 8,
    delay: 25,
    duration: 500,
    useMin: true,
  });
  document.addEventListener("DOMContentLoaded", () => {
    magicGrid.listen();
  });

  function fillCanvas(img: HTMLImageElement, canvas: HTMLCanvasElement) {
    let b64 = img.dataset.hash!;
    let byteArr = Uint8Array.from(window.atob(b64), (c) => c.charCodeAt(0));
    const { rgba: pixels, w, h } = thumbHashToRGBA(byteArr);
    const ctx = canvas.getContext("2d")!;
    const imageData = ctx.createImageData(w, h);
    imageData.data.set(pixels);
    ctx.putImageData(imageData, 0, 0);
  }

  function setupImgViewer(i: number, direction?: -1 | 1) {
    if (!imgs[i].dataset.fullSizeSrc) {
      throw new Error("Expected full-size-src to be non empty");
    }
    currentIndex = i;
    let conts = imageViewer.getElementsByClassName("img-container");
    let cont = conts[conts.length - 1] as HTMLElement;
    let img = cont.getElementsByTagName("img")[0] as HTMLImageElement;
    let newCont = cont.cloneNode(true) as HTMLElement;
    let newWrapper = newCont.getElementsByClassName("img-wrapper")[0] as HTMLElement;
    let newImg = newCont.getElementsByTagName("img")[0] as HTMLImageElement;
    newWrapper.style.aspectRatio = String(+imgs[i].dataset.width! / +imgs[i].dataset.height!); // + "/" + imgs[i].dataset.height;
    newWrapper.style.maxWidth = imgs[i].dataset.width + "px"; // + "/" + imgs[i].dataset.height;
    newImg.src = "";
    newImg.src = imgs[i].dataset.fullSizeSrc!;
    cont.insertAdjacentElement("afterend", newCont);
    if (direction) {
      // CSS ANIM
      // newImg.style.animation = `slide-img ${IMAGE_TRANSITION}ms forwards cubic-bezier(0.25, 1, 0.5, 1)`;
      // newCont.style.animation = `slide ${IMAGE_TRANSITION}ms forwards cubic-bezier(0.25, 1, 0.5, 1)`;
      // img.style.animation = `slide-img ${IMAGE_TRANSITION}ms forwards reverse cubic-bezier(0.25, 1, 0.5, 1)`;
      // cont.style.animation = `slide ${IMAGE_TRANSITION}ms forwards reverse cubic-bezier(0.25, 1, 0.5, 1)`;

      // JS ANIM
      // const easing = "cubic-bezier(0.25, 1, 0.5, 1)";
      // let leftImg = { objectPosition: "100px" };
      // let centerImg = { objectPosition: "0" };
      // let rightImg = { objectPosition: "-100px" };
      // newImg.animate([direction === 1 ? rightImg : leftImg, centerImg], { duration: IMAGE_TRANSITION, easing: easing});
      // img.animate([centerImg, direction === 1 ? leftImg : rightImg], { duration: IMAGE_TRANSITION, easing: easing});
      //
      // let leftCont = { transform: "translateX(-200px)", opacity: 0 };
      // let centerCont = { transform: "translateX(0)", opacity: 1 };
      // let rightCont = { transform: "translateX(200px)", opacity: 0 };
      // newCont.animate([direction === 1 ? rightCont : leftCont, centerCont], { duration: IMAGE_TRANSITION, easing: easing});
      // img.animate([centerCont, direction === 1 ? leftCont : rightCont], { duration: IMAGE_TRANSITION, easing: easing});

      // JS TRANSITION
      let translate = direction * (20 + 0.1 * window.innerWidth);
      let objPos = translate * 0.5;
      newCont.style.transitionProperty = "none";
      newCont.style.transform = `translateX(${translate}px)`;
      newCont.style.opacity = "0";
      // newImg.style.objectPosition = `${-objPos}px`;
      requestAnimationFrame(() => {
        newCont.style.transitionProperty = "transform, opacity";
        newCont.style.transform = "translateX(0)";
        newCont.style.opacity = "1";
        // newImg.style.objectPosition = `50%`;
      });

      cont.style.transform = `translateX(${-translate}px)`;
      cont.style.opacity = "0";
      // img.style.objectPosition = `${objPos}px`;

      setTimeout(
        () => imageViewer.getElementsByClassName("img-container")[0].remove(),
        IMAGE_TRANSITION
      );
    } else {
      cont.remove();
    }

    let blurImg = document.getElementsByClassName("blur-img")[0] as HTMLImageElement;
    let newBlurImg = blurImg.cloneNode() as HTMLImageElement;
    newBlurImg.style.opacity = "0";
    newBlurImg.style.transitionProperty = "opacity";
    // newBlurImg.classList.remove("hidden");
    newBlurImg.src = imgs[i].src;
    fetchingImgs++;
    function show() {
      if (!hidingImageViewer.get() && newBlurImg.matches(":last-child")) {
        newBlurImg.style.opacity = "1";
      }
      setTimeout(() => {
        if (--fetchingImgs === 0) {
          let imgs = [...document.getElementsByClassName("blur-img")].slice(0, -1);
          imgs.forEach((img) => img.remove());
        }
      }, BLUR_TRANSITION);
    }
    if (newBlurImg.complete) requestAnimationFrame(() => show());
    else newBlurImg.addEventListener("load", show);
    blurImg.parentNode!.appendChild(newBlurImg);

    if (i !== 0) {
      prev.dataset.imageIndex = `${i - 1}`;
      prev.style.visibility = "visible";
    } else {
      prev.style.visibility = "hidden";
    }
    if (i !== imgs.length - 1) {
      next.dataset.imageIndex = `${i + 1}`;
      next.style.visibility = "visible";
    } else {
      next.style.visibility = "hidden";
    }
  }

  // Lazy loading. Done this way because Astro's Picture, js masonry using translates, and lazy loading all have to work with each other.
  let observer = new IntersectionObserver((entries, observer) => {
    for (let entry of entries) {
      if (entry.isIntersecting) {
        let img = entry.target.getElementsByTagName("img")[0];
        img.classList.remove("hidden");
        observer.unobserve(img);
        continue;
      }
    }
  });
  for (let imgContainer of imgContainers) {
    observer.observe(imgContainer);
  }

  // Setup blurhashes and click events
  for (let i = 0; i < imgs.length; i++) {
    fillCanvas(imgs[i], imgContainers[i].getElementsByTagName("canvas")[0]);

    imgs[i].addEventListener("click", (e) => {
      let blurImgs = document.getElementsByClassName("blur-img") as HTMLCollectionOf<HTMLElement>;
      for (let blurImg of blurImgs) {
        blurImg.style.transitionProperty = "none";
        blurImg.style.opacity = "0";
        blurImg.classList.remove("hidden");
      }
      imageViewer.classList.remove("hidden");
      requestAnimationFrame(() => {
        imageViewer.style.opacity = "1";
        // let blurImgs = document.getElementsByClassName("blur-img");
        // for (let blurImg of blurImgs) {
        //   blurImg.style.opacity = "1";
        // }
      });

      setupImgViewer(i);
    });
  }

  document.getElementById("image-viewer-close")!.addEventListener("click", hideImageViewer);

  function keySwitch(e: KeyboardEvent) {
    if (!imageViewer.classList.contains("hidden")) {
      if (e.key === "ArrowLeft" && currentIndex > 0)
        setupImgViewer(parseInt(prev.dataset.imageIndex!), -1);
      if (e.key === "ArrowRight" && currentIndex < imgs.length - 1)
        setupImgViewer(parseInt(next.dataset.imageIndex!), 1);
    }
  }
  prev.addEventListener("click", () =>
    setupImgViewer(parseInt(prev.dataset.imageIndex ?? "0"), -1)
  );
  next.addEventListener("click", () => setupImgViewer(parseInt(next.dataset.imageIndex ?? "0"), 1));
  document.addEventListener("keydown", keySwitch);
</script>

<style>
  .text-shadow {
    text-shadow: 0 0 4px black;
  }
</style>
