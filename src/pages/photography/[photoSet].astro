---
import Layout from "@layouts/Layout.astro";
import Nav from "@components/Nav.astro";
import ImageViewer from "@components/ImageViewer.astro";
import Main from "@layouts/Main.astro";
import { toUrl } from "@lib/util";
import Link from "@components/Link.astro";
import { getCollection } from "astro:content";
import ImageViewerImg from "@components/ImageViewerImg.astro";

interface Photo {
  src: string;
  alt: string;
}
interface PhotoSet {
  index: number;
  thumb: Photo;
  title: string;
  photos: Photo[];
}
interface Props {
  photoSet: PhotoSet;
  sections: Record<string, PhotoSet[]>;
}

export async function getStaticPaths() {
  let sections: Record<string, PhotoSet[]> = {};

  let photoSetsRaw = await getCollection("photography");
  let photoSets = photoSetsRaw.map((photoSet) => photoSet.data).sort((a, b) => a.index - b.index);

  for (let photoSet of photoSets) {
    (sections[photoSet.section] ??= []).push(photoSet);
  }

  return photoSets.map((photoSet) => ({
    params: {
      photoSet: toUrl(photoSet.title),
    },
    props: { photoSet, sections },
  }));
}

const { photoSet, sections } = Astro.props;
---

<Layout>
  <Main class="sm:!w-auto xl:w-wide overflow-hidden">
    <Nav />
    <nav class="mt-12 lg:mt-8 mb-16">
      {
        Object.values(sections).map((sets) => (
          <ul class="flex flex-wrap justify-center">
            {sets.map((set) => (
              <li class="inline-block">
                <Link
                  href={"/photography/" + toUrl(set.title)}
                  class="px-4 pb-4 lg:px-2 group"
                  activeClass="!tracking-[0.55em] !font-bold px-6"
                >
                  {set.title}
                </Link>
              </li>
            ))}
          </ul>
        ))
      }
    </nav>
    <div id="masonry-container" class="mx-auto w-full">
      {
        photoSet.photos.map(({ src, alt }, i) => (
          <ImageViewerImg
            src={src}
            alt={alt}
            width={320}
            index={i}
            buttonClass="aspect-ratio-polyfill overflow-clip group inline-block translate-x-[100vw] max-w-[calc(50%-8px)]"
            class="transition-transform cursor-pointer group-hover:scale-110 duration-300 hidden"
          />
        ))
      }
    </div>
  </Main>
  <ImageViewer />
</Layout>

<script>
  import MagicGrid from "magic-grid";

  let magicGrid = new MagicGrid({
    container: "#masonry-container",
    static: true,
    gutter: 8,
    useMin: true,
  });
  document.addEventListener("DOMContentLoaded", () => {
    magicGrid.listen();
  });

  let imgContainers = document.getElementsByClassName("img-container");

  // Lazy loading
  // Done this way because Astro's Images, js masonry using translates, and lazy loading all have to work with each other
  let observer = new IntersectionObserver((entries, observer) => {
    for (let entry of entries) {
      if (entry.isIntersecting) {
        let img = entry.target.getElementsByTagName("img")[0];
        img.classList.remove("hidden");
        observer.unobserve(img);
        continue;
      }
    }
  });

  for (let i = 0; i < imgContainers.length; i++) {
    observer.observe(imgContainers[i]);
  }
</script>

<style>
  .text-shadow {
    text-shadow: 0 0 4px black;
  }
</style>
