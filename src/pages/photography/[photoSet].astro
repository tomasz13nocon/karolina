---
import Layout from "@layouts/Layout.astro";
import Nav from "@components/Nav.astro";
import ImageViewer from "@components/ImageViewer.astro";
import Main from "@layouts/Main.astro";
import { toUrl } from "@lib/util";
import Link from "@components/Link.astro";
import ImageViewerImg from "@components/ImageViewerImg.astro";
import directus, { type PhotoSet } from "@lib/directus";
import { readItems } from "@directus/sdk";

interface Props {
  photoSet: PhotoSet;
  sections: Record<string, PhotoSet[]>;
}

export async function getStaticPaths() {
  const sections = await directus.request(
    readItems("photo_sections", { fields: ["photoSets", { photoSets: ["*"] }] }),
  );
  // const photoSets = sections.flatMap(({photoSets})=> photoSets);

  const photoSets = await directus.request(
    readItems("photo_sets", {
      fields: [
        "*",
        // @ts-ignore
        { photos: ["directus_files_id", { directus_files_id: ["id", "width", "height"] }] },
      ],
    }),
  );

  return photoSets.map((photoSet) => ({
    params: {
      photoSet: toUrl(photoSet.title),
    },
    props: { photoSet, sections: Object.groupBy(photoSets, ({ section }) => section) },
  }));
}

const { photoSet, sections } = Astro.props;
---

<Layout>
  <Main class="sm:!w-auto xl:w-wide overflow-hidden">
    <Nav />
    <nav class="mt-12 lg:mt-8 mb-16">
      {
        Object.values(sections).map((photoSets) => (
          <ul class="flex flex-wrap justify-center">
            {photoSets.map((photoSet) => (
              <li class="inline-block">
                <Link
                  href={"/photography/" + toUrl(photoSet.title)}
                  class="px-4 pb-4 lg:px-2 group"
                  activeClass="!tracking-[0.55em] !font-bold px-6"
                >
                  {photoSet.title}
                </Link>
              </li>
            ))}
          </ul>
        ))
      }
    </nav>
    <div id="masonry-container" class="mx-auto w-full" data-dynamic-position={photoSet.dynamicPosition}>
      {
        photoSet.photos.map(({ directus_files_id: { id, width, height } }, i) => (
          <ImageViewerImg
            rawSrc={id}
            width={320}
            height={320 / (width / height)}
            index={i}
            buttonClass="aspect-ratio-polyfill overflow-clip group inline-block translate-x-[100vw] max-w-[calc(50%-8px)]"
            class="transition-transform cursor-pointer group-hover:scale-110 duration-300"
          />
        ))
      }
    </div>
  </Main>
  <ImageViewer />
</Layout>

<script>
  import MagicGrid from "magic-grid";

  const gridEl = document.getElementById("masonry-container");

  console.log(gridEl?.dataset.dynamicPosition);

  let magicGrid = new MagicGrid({
    container: "#masonry-container",
    static: true,
    gutter: 8,
    useMin: gridEl?.dataset.dynamicPosition === "true",
  });
  document.addEventListener("DOMContentLoaded", () => {
    magicGrid.listen();
  });

  let imgContainers = document.getElementsByClassName("img-container");

  // Lazy loading
  // Done this way because Astro's Images, js masonry using translates, and lazy loading all have to work with each other
  let observer = new IntersectionObserver((entries, observer) => {
    for (let entry of entries) {
      if (entry.isIntersecting) {
        let img = entry.target.getElementsByTagName("img")[0];
        img.classList.remove("hidden");
        observer.unobserve(img);
        continue;
      }
    }
  });

  for (let i = 0; i < imgContainers.length; i++) {
    observer.observe(imgContainers[i]);
  }
</script>

<style>
  .text-shadow {
    text-shadow: 0 0 4px black;
  }
</style>
