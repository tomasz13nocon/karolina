---
import { getImage } from "@astrojs/image";
import Layout from "@layouts/Layout.astro";
import Nav from "@components/Nav.astro";
import ImageViewer from "@components/ImageViewer.astro";
import Main from "@layouts/Main.astro";
import { getAsset, toUrl } from "@lib/util";
import Link from "@components/Link.astro";
import { getCollection } from "astro:content";
import Blurhash from "@components/Blurhash.astro";

interface Photo {
  src: string;
  alt: string;
}
interface PhotoSet {
  index: number;
  thumb: string;
  title: string;
  photos: Photo[];
}
interface Props {
  photoSet: PhotoSet;
  allSets: PhotoSet[];
}
interface MyImage {
  width: number;
  height: number;
  ogSrc: string;
  src: string;
  fullSrc: string;
  alt: string;
}

export async function getStaticPaths() {
  let photoSetsRaw = await getCollection("photography");
  let photoSets = photoSetsRaw.map((photoSet) => photoSet.data);
  return photoSets.map((photoSet) => ({
    params: {
      photoSet: toUrl(photoSet.title),
    },
    props: { photoSet, allSets: photoSets },
  }));
}

const IMG_WIDTH = 320;

const { photoSet, allSets } = Astro.props;

let imgs: MyImage[] = [];

// Calculate blurhashes and transform images to smaller size
for (let { src, alt } of photoSet.photos) {
  const img = await getAsset(src);

  const { src: smallSrc } = await getImage({
    src: img.default.src,
    alt,
    width: IMG_WIDTH * 1.1,
    aspectRatio: img.default.width / img.default.height,
    format: "webp",
    quality: 90,
  });
  const { src: fullSrc } = await getImage({
    src: img.default.src,
    alt,
    width: img.default.width,
    height: img.default.height,
  });
  if (smallSrc == null || fullSrc == null) {
    throw new Error("Astro's getImage failed. src is not present.");
  }

  imgs.push({
    width: img.default.width,
    height: img.default.height,
    ogSrc: src,
    src: smallSrc,
    fullSrc,
    alt,
  });
}
---

<Layout>
  <Main class="sm:!w-auto xl:w-wide overflow-hidden">
    <Nav />
    <nav class="mt-12 lg:mt-8 mb-16">
      <ul class="flex flex-wrap justify-center">
        {
          allSets
            .sort((a, b) => a.index - b.index)
            .map((set) => (
              <li class="inline-block">
                <Link
                  href={"/photography/" + toUrl(set.title)}
                  class="px-4 pb-4 lg:px-2 group"
                  activeClass="!tracking-[0.55em] !font-bold px-6"
                >
                  {set.title}
                </Link>
              </li>
            ))
        }
      </ul>
    </nav>
    <div id="masonry-container" class="mx-auto w-full">
      {
        imgs.map((img, i) => (
          <button
            class="img-container aspect-ratio-polyfill relative overflow-clip max-w-full group inline-block translate-x-[100vw]"
            style={{
              width: `${IMG_WIDTH}px`,
              "--aspect-ratio": `${(img.height / img.width) * 100}%`,
            }}
          >
            <img
              data-index={i}
              data-full-size-src={img.fullSrc}
              data-width={img.width}
              data-height={img.height}
              loading="lazy"
              class="img transition-transform cursor-pointer group-hover:scale-110 duration-300 hidden"
              src={img.src}
              alt={img.alt}
              width={IMG_WIDTH}
              height={Math.floor((IMG_WIDTH / img.width) * img.height)}
            />

            <Blurhash src={img.ogSrc} />
          </button>
        ))
      }
    </div>
  </Main>
  <ImageViewer />
</Layout>

<script>
  import MagicGrid from "magic-grid";

  let magicGrid = new MagicGrid({
    container: "#masonry-container",
    static: true,
    gutter: 8,
    useMin: true,
  });
  document.addEventListener("DOMContentLoaded", () => {
    magicGrid.listen();
  });

  let imgContainers = document.getElementsByClassName("img-container");

  // Lazy loading
  // Done this way because Astro's Images, js masonry using translates, and lazy loading all have to work with each other
  let observer = new IntersectionObserver((entries, observer) => {
    for (let entry of entries) {
      if (entry.isIntersecting) {
        let img = entry.target.getElementsByTagName("img")[0];
        img.classList.remove("hidden");
        observer.unobserve(img);
        continue;
      }
    }
  });

  for (let i = 0; i < imgContainers.length; i++) {
    observer.observe(imgContainers[i]);
  }
</script>

<style>
  .text-shadow {
    text-shadow: 0 0 4px black;
  }
</style>
